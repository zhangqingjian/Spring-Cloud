<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
         http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.0.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
         http://www.springframework.org/schema/aop 
         http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<bean id="parentDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close" scope="singleton">

		<!-- 连接关闭时默认将所有未提交的操作回滚。默认为false -->
		<property name="autoCommitOnClose" value="true" />
		<!-- 连接池中保留的最小连接数,默认3 -->
		<property name="minPoolSize" value="3" />
		<!-- 连接池中保留的最大连接数。默认为15 -->
		<property name="maxPoolSize" value="50" />
		<!-- 初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。默认为3 -->
		<property name="initialPoolSize" value="3" />
		<!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 
			如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0 -->
		<property name="maxStatements" value="0" />
		<!-- 当连接池中的连接用完时，C3P0一次性创建新连接的数目。默认为3 -->
		<property name="acquireIncrement" value="5" />
		<!-- 定义在从数据库获取新连接失败后重复尝试获取的次数，默认为30 -->
		<property name="acquireRetryAttempts" value="10" />
		<!--c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行。Default: 
			3 -->
		<property name="numHelperThreads" value="3" />
		<!-- 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒，默认为0 -->
		<property name="checkoutTimeout" value="10000" />
		<!-- 最大空闲时间，超过空闲时间的连接将被丢弃。60秒测一次，为0或负数则永不丢弃。默认为0秒 set to something slightly 
			less than wait_timeout, preventing 'stale' connections from being handed 
			out -->
		<property name="maxIdleTime" value="60" />
		<!-- 隔多少秒检查所有连接池中的空闲连接，60秒，默认为0表示不检查；set to something much less than wait_timeout, 
			prevents connections from going stale -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 获取connnection时测试是否有效 如果设为true那么在取得连接的同时将校验连接的有效性。默认为false。 -->
		<property name="testConnectionOnCheckin" value="false" />
		<property name="preferredTestQuery" value="SELECT 1" />
		<!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 
			等方法来提升连接测试的性能。默认为false； -->
		<!-- <property name="testConnectionOnCheckout" value="true"/> -->
		<!-- C3P0将建一张名为Test的空表，并使用其自带的查询语句进行测试。如果定义了这个参数，那么属性preferredTestQuery将被忽略。你不能在这张Test表上进行任何操作，它将中为C3P0测试所用，默认为null； -->
		<property name="automaticTestTable" value="C3P0TestTable" />
	</bean>
	<!-- 主数据源 -->
	<bean id="masterDataSource" parent="parentDataSource" scope="singleton">
		<property name="driverClass" value="${master.jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${master.jdbc.url}" />
		<property name="user" value="${master.jdbc.username}" />
		<property name="password" value="${master.jdbc.password}" />
	</bean>
	<!-- 从数据源 -->
	<bean id="slaveDataSource" parent="parentDataSource" scope="singleton">
		<property name="driverClass" value="${slave.jdbc.driverClassName}" />
		<property name="jdbcUrl" value="${slave.jdbc.url}" />
		<property name="user" value="${slave.jdbc.username}" />
		<property name="password" value="${slave.jdbc.password}" />
	</bean>

	<bean id="dataSource" class="com.yo.base.utils.database.DynamicDataSource"
		scope="singleton">
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="master" value-ref="masterDataSource" />
				<entry key="slave" value-ref="slaveDataSource" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="masterDataSource" />
	</bean>
	<!-- 切换数据源 -->
	<bean id="dataSourceAdvice" class="com.yo.base.utils.database.DataSourceAdvice"
		scope="singleton">
		<property name="slaveFilterList">
			<list>
				<!-- 如果请求中包含以下路径，则进入slave拦截 -->
				<value>get</value>
				<value>login</value>
				<value>check</value>
				<value>search</value>
				<value>select</value>
				<value>push</value>
				<value>find</value>
				<value>query</value>
				<value>count</value>
				<value>stastic</value>
			</list>
		</property>
	</bean>
	<aop:config>
		<aop:advisor
			pointcut="execution(public * com.yo.news..*.business.ebo.*.*(..))"
			advice-ref="dataSourceAdvice" />
	</aop:config>
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		scope="singleton">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- propagation="REQUIRED" 支持事务 -->
			<tx:method name="save*" propagation="REQUIRED" read-only="false" />
			<tx:method name="add*" propagation="REQUIRED" read-only="false" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" />
			<tx:method name="edit*" propagation="REQUIRED" read-only="false" />
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" />
			<tx:method name="del*" propagation="REQUIRED" read-only="false" />
			<tx:method name="remove*" propagation="REQUIRED" read-only="false" />
			<tx:method name="create*" propagation="REQUIRED" read-only="false" />
			<tx:method name="cancel*" propagation="REQUIRED" read-only="false" />
			<!-- 只有对于那些具有可能启动一个新事务的传播行为(PROPAGATION_REQUIRED,PROPAGATION_REQUIREDS_NEW,PROPAGATION_NESTED)的方法来说 
				，将事务声明为只读才有意义。例如create方法定义为REQUIRED，在create方法中调用get，那么get方法的readonly就会有效 -->
			<!-- 如果没有给get设定propagation="REQUIRED",其默认就是REQUIRED -->
			<!-- 不管此处对不对get进行设置，该方法中如果涉及到多次调用dao层，其只会开启一次数据库 -->
			<!-- 此处设置get 为read-only="true" 其作用在于：当像ebo层的save方法调用其他ebo层的get方法时，因为get方法是readonly,spring会对get方法做类似于不启动回滚段，不记录回滚log等优化手段。设置成 
				propagation="SUPPORTS"，如果调用该get方法的其他方法已经开启了事务，那么该get方法也会被放到事务当中去 -->
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="search*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="check*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="count*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="login*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="report*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- 针对public的方法进行切面 -->
	<aop:config>
		<aop:pointcut id="pointCut"
			expression=" execution(public * com.yo.news..*.business.ebo.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pointCut" />
	</aop:config>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
		scope="singleton">
		<!--dataSource属性指定要用到的连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!--configLocation属性指定mybatis的核心配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 所有配置的mapper文件 -->
		<property name="mapperLocations" value="classpath:com/yo/news/**/mapper/*.xml" />
	</bean>

	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.yo.news.**.mapper" />
		<!-- 这里如果用下面这种方式会出现Cannot load JDBC driver class ${jdbc.driverClassName},-所以用sqlSessionFactoryBeanName代替 -->
		<!-- <property name="sqlSessionFactory" ref="sqlSessionFactory" /> -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
</beans>